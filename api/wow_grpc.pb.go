// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wow.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordOfWisdomClient is the client API for WordOfWisdom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordOfWisdomClient interface {
	GetChallenge(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Challenge, error)
	InspireMe(ctx context.Context, in *ChallengeSolution, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type wordOfWisdomClient struct {
	cc grpc.ClientConnInterface
}

func NewWordOfWisdomClient(cc grpc.ClientConnInterface) WordOfWisdomClient {
	return &wordOfWisdomClient{cc}
}

func (c *wordOfWisdomClient) GetChallenge(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Challenge, error) {
	out := new(Challenge)
	err := c.cc.Invoke(ctx, "/wow.WordOfWisdom/GetChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordOfWisdomClient) InspireMe(ctx context.Context, in *ChallengeSolution, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/wow.WordOfWisdom/InspireMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordOfWisdomServer is the server API for WordOfWisdom service.
// All implementations must embed UnimplementedWordOfWisdomServer
// for forward compatibility
type WordOfWisdomServer interface {
	GetChallenge(context.Context, *emptypb.Empty) (*Challenge, error)
	InspireMe(context.Context, *ChallengeSolution) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedWordOfWisdomServer()
}

// UnimplementedWordOfWisdomServer must be embedded to have forward compatible implementations.
type UnimplementedWordOfWisdomServer struct {
}

func (UnimplementedWordOfWisdomServer) GetChallenge(context.Context, *emptypb.Empty) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedWordOfWisdomServer) InspireMe(context.Context, *ChallengeSolution) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspireMe not implemented")
}
func (UnimplementedWordOfWisdomServer) mustEmbedUnimplementedWordOfWisdomServer() {}

// UnsafeWordOfWisdomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordOfWisdomServer will
// result in compilation errors.
type UnsafeWordOfWisdomServer interface {
	mustEmbedUnimplementedWordOfWisdomServer()
}

func RegisterWordOfWisdomServer(s grpc.ServiceRegistrar, srv WordOfWisdomServer) {
	s.RegisterService(&WordOfWisdom_ServiceDesc, srv)
}

func _WordOfWisdom_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordOfWisdomServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wow.WordOfWisdom/GetChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordOfWisdomServer).GetChallenge(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordOfWisdom_InspireMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordOfWisdomServer).InspireMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wow.WordOfWisdom/InspireMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordOfWisdomServer).InspireMe(ctx, req.(*ChallengeSolution))
	}
	return interceptor(ctx, in, info, handler)
}

// WordOfWisdom_ServiceDesc is the grpc.ServiceDesc for WordOfWisdom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordOfWisdom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wow.WordOfWisdom",
	HandlerType: (*WordOfWisdomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _WordOfWisdom_GetChallenge_Handler,
		},
		{
			MethodName: "InspireMe",
			Handler:    _WordOfWisdom_InspireMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wow.proto",
}
